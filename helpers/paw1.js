"use strict";
import * as im from "../paw1.js";
console.log("what did i do", im);

/**
 * This function returns an array where retArray[0] is a
 * concatenation of all the elements in the array.
 * because of this, zero index is eliminated hence,
 * the first element is stored in index[1]; =>
 *
 * el_0 = retArray[1] + retArray[2] ... + retArray[n]
 *
 *  el_1 = retArray[1]
 *
 *  el_2 = retArray[2] etc.
 * @param {limit} limit refers to the limit for the pin
 *  length generated by the machine
 */
export function genPin(limit) {
	let fish,
		resultArray = Array();
	for (let index = 0; index < limit; index++) {
		// this generates a single digit between 0-9
		// rounds up a number to the nearest whole number
		fish = Math.floor(Math.random() * 10);
		// this saves the generated whole number to a
		// resultArray which we will return to the user
		resultArray.push(fish);
	}
	resultArray.unshift(resultArray.join(""));
	return resultArray;
}

/**
 *This function gets a list of code-guesses from a user & compiles them, after processing them, it
 * returns an object that summarizes the data collected, use the webdevtools to traverse the object
 * @param {limit} limit refers to the number of trials the user can get for this program or game
 * its default value is 2
 */
export function getguessesFromUser(limit = 2) {
	const trials = {};
	for (let index = 1; index <= limit; index++) {
		const computerCode = [...im.computerCode_copy];
		console.log("mamalid", im.computerCode);

		const wonGuesses = Array();
		const perfectGuesses = Array();
		const imperfectGuesses = Array();

		// for debugging
		console.log("initial computerCode", computerCode);
		/**
		 * @variable user_raw_code refers to the raw user input
		 */
		const user_raw_code = prompt(
			`Trial ${index} Enter your 4 digit code`,
			1234
		);
		/**
		 * @variable user_code refers to an array consisting of the raw user input, with a limit
		 * of 4 characters with a prefixed element in array[0]
		 */
		// store usercode
		const user_code = user_raw_code.split("", 4);
		/**
		 * @variable real_user_code refers to an array consisting of the raw user input, with a
		 * limit of 4 characters and without any prefixed element in array[0]
		 */
		const real_user_code = [...user_code];

		// concatenate the resulting array to a string and save it in the array[0]
		user_code.unshift(user_code.join(""));
		// The computer tells them how many digits they guessed correctly
		// we are starting from 1 becos of non zerobased indexed array

		// for deugging
		console.log("initial user_code", user_code);

		for (let index = 1; index < computerCode.length; index++) {
			const el = computerCode[index];
			for (let j = 1; j < user_code.length; j++) {
				const elem = user_code[j];
				// when a match is found
				if (elem == el) {
					wonGuesses.push(elem);
					// when a correct guess has corresponding indexes
					if (index == j) {
						perfectGuesses.push(elem);
					} else {
						imperfectGuesses.push(elem);
					}
					// this code is essential, it marks the matched codes as 'x'
					computerCode[index] = "x";
					user_code[j] = "x";
					break;
				}
			}
			// this is important, its for debugging
			// console.log("(inside) new user_code: ", user_code);
			// console.log("(inside) new computerCode: ", computerCode);
			// console.log("====================================");
		}
		// this is important, its for debugging
		// console.log("final computerCode: ", computerCode);
		// console.log("final userCode: ", user_code);

		console.log("wonGuesses", wonGuesses.length);

		// console.log("perfectGuesses", perfectGuesses);
		let qualifier = wonGuesses.length > 1 ? "guesses" : "guess";
		let qualifier_2 = perfectGuesses.length > 1 ? "guesses" : "guess";
		/**
		 * we have to splice cos the array is larger in size by one element (array[0] is just
		 * there for degubugging purposes)
		 */
		if (perfectGuesses.length == im.real_computerCode) {
			console.log(perfectGuesses.length);
			console.log(
				`Master!, you got all ${perfectGuesses.length} code ${qualifier_2} in the right order`
			);
		} else if (wonGuesses) {
			console.log(
				`Congrats! you got ${wonGuesses.length} ${qualifier} correctly`
			);
		} else {
			console.log(
				"Oops! Try again, you failed the game of codes with 0 points"
			);
		}

		// summary MESSAGES
		console.log("SUMMARY");
		// PERFECT GUESSES
		console.log(
			`YOU HAVE MADE ${perfectGuesses.length} PERFECT ${qualifier_2}`
		);
		// IMPERFECT GUESSES
		console.log(
			`YOU HAVE MADE ${imperfectGuesses.length} IMPERFECT ${qualifier_2}`
		);
		const attempt = "attempt" + index;
		trials[attempt] = {
			u_guessed: [...real_user_code],
			imperfectGuesses: imperfectGuesses.length,
			perfectGuesses: perfectGuesses.length,
		};
		// console.log(trials);
	} //endof loop
	// trials.computerCode = [...real_computerCode];
	trials.maxperfectGuesses = 0;

	// console.log("finally", trials);
	return trials;
}
//end of function

export function getMostPerfectAttempt(trials) {
	// iterator for each trial to obtain the max perfect trials
	for (let index = 1; index <= im.limiter; index++) {
		const attempt = "attempt" + index;
		if (trials[attempt].perfectGuesses == trials.maxperfectGuesses) {
			trials.summary =
				trials.summary + `, ${attempt}, is max perfect guesses`;
		}
		if (trials[attempt].perfectGuesses > trials.maxperfectGuesses) {
			trials.maxperfectGuesses = trials[attempt].perfectGuesses;
			trials.summary = ` ${attempt}, is max perfect guesses`;
		}
	}
}
